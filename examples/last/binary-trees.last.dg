type Node = <left: Node^, right: Node^>;

var freeList: Node^ = null;
var top: Node^ = memory.top() reinterpretas Node^;

fun newNode(left: Node^, right: Node^): Node^ {
    var node: Node^ = freeList;
    if (node != null) {
        freeList = node^.left
    } else {
        node = top;
        var newTop: Node^ = top + 1;
        if (newTop >= (memory.limit() reinterpretas Node^)) {
            memory.grow(1);
        }
        top = newTop;
    }
    node^.left = left;
    node^.right = right;
    node;
}

export fun freeTree(tree: Node^): void {
    if (tree != null) {
        freeTree(tree^.left);
        freeTree(tree^.right);
        tree^.left = freeList;
        freeList = tree;
    }
}

export fun itemCheck(node: Node^): i32 =
    if (node^.left == null) 1 else 1 + itemCheck(node^.left) + itemCheck(node^.right)

export fun bottomUpTree(depth: i32): Node^ =
    if (depth > 0) newNode(bottomUpTree(depth - 1), bottomUpTree(depth - 1))
    else newNode(null, null);

export fun work(iterations: i32, depth: i32): i32 {
    var check: i32 = 0;
    var i: i32 = 0;
    loop {
        if (i < iterations) {
            var tree: Node^ = bottomUpTree(depth);
            check = check + itemCheck(tree);
            freeTree(tree);
            i = i + 1;
            branch;
        }
    }
    check;
}
