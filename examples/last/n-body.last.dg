let PI: f64 = 3.141592653589793;
let SOLAR_MASS: f64 = 4.0 * PI * PI;
let DAYS_PER_YEAR: f64 = 365.24;

type BodyValue = <
    x: f64,
    y: f64,
    z: f64,
    vx: f64,
    vy: f64,
    vz: f64,
    mass: f64,
>

fun Body(
    x: f64,
    y: f64,
    z: f64,
    vx: f64,
    vy: f64,
    vz: f64,
    mass: f64
): BodyValue = {
    x: x,
    y: y,
    z: z,
    vx: vx,
    vy: vy,
    vz: vz,
    mass: mass,
}

fun Jupiter(): BodyValue = Body(
        4.84143144246472090e+00,
        -1.16032004402742839e+00,
        -1.03622044471123109e-01,
        1.66007664274403694e-03 * DAYS_PER_YEAR,
        7.69901118419740425e-03 * DAYS_PER_YEAR,
        -6.90460016972063023e-05 * DAYS_PER_YEAR,
        9.54791938424326609e-04 * SOLAR_MASS
    )

fun Saturn(): BodyValue = Body(
        8.34336671824457987e+00,
        4.12479856412430479e+00,
        -4.03523417114321381e-01,
        -2.76742510726862411e-03 * DAYS_PER_YEAR,
        4.99852801234917238e-03 * DAYS_PER_YEAR,
        2.30417297573763929e-05 * DAYS_PER_YEAR,
        2.85885980666130812e-04 * SOLAR_MASS
    )

fun Uranus(): BodyValue = Body(
        1.28943695621391310e+01,
        -1.51111514016986312e+01,
        -2.23307578892655734e-01,
        2.96460137564761618e-03 * DAYS_PER_YEAR,
        2.37847173959480950e-03 * DAYS_PER_YEAR,
        -2.96589568540237556e-05 * DAYS_PER_YEAR,
        4.36624404335156298e-05 * SOLAR_MASS
    )

fun Neptune(): BodyValue = Body(
        1.53796971148509165e+01,
        -2.59193146099879641e+01,
        1.79258772950371181e-01,
        2.68067772490389322e-03 * DAYS_PER_YEAR,
        1.62824170038242295e-03 * DAYS_PER_YEAR,
        -9.51592254519715870e-05 * DAYS_PER_YEAR,
        5.15138902046611451e-05 * SOLAR_MASS
    )

fun Sun(): BodyValue = Body(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, SOLAR_MASS)

var bodies: BodyValue[] = [Sun(), Jupiter(), Saturn(), Uranus(), Neptune()];

export fun offsetMomentum(): void {
    let size: i32 = 5;
    var px: f64 = 0.0;
    var py: f64 = 0.0;
    var pz: f64 = 0.0;
    var i: i32 = 0;
    block outer {
        loop {
            if (i >= size) { branch outer; }
            var mass: f64 = bodies[i].mass;
            px = px + bodies[i].vx * mass;
            py = py + bodies[i].vy * mass;
            pz = pz + bodies[i].vz * mass;
            i = i + 1;
            branch;
        }
    }

    bodies[0].vx = -px / SOLAR_MASS;
    bodies[0].vy = -py / SOLAR_MASS;
    bodies[0].vz = -pz / SOLAR_MASS;
}

export fun advance(dt: f64): void {
    let size: i32 = 5;

    var i: i32 = 0;
    block outer {
        loop {
            if (i >= size) { branch outer; }
            var bodyi: BodyValue = bodies[i]
            var vxi: f64 = bodyi.vx;
            var vyi: f64 = bodyi.vy;
            var vzi: f64 = bodyi.vz;
            var j: i32  = i + 1;
            block inner {
                loop {
                    if (j >= size) { branch inner; }
                    var bodyj: BodyValue = bodies[j];
                    var dx: f64 = bodyi.x - bodyj.x;
                    var dy: f64 = bodyi.y - bodyj.y;
                    var dz: f64 = bodyi.z - bodyj.z;

                    var d2: f64 = dx * dx + dy * dy + dz * dz;
                    var mag: f64 = dt / (d2 * d2) sqrt;

                    vxi = vxi - dx * bodyj.mass * mag;
                    vyi = vyi - dy * bodyj.mass * mag;
                    vzi = vzi - dz * bodyj.mass * mag;

                    bodies[j].vx = bodyj.vx + dx * bodyi.mass * mag;
                    bodies[j].vy = bodyj.vy + dy * bodyi.mass * mag;
                    bodies[j].vz = bodyj.vz + dz * bodyi.mass * mag;
                    j = j + 1;
                    branch;
                }
            }
            bodies[i].vx = vxi;
            bodies[i].vy = vyi;
            bodies[i].vz = vzi;

            i = i + 1;
            branch;
        }
    }

    i = 0;
    block outer {
        loop {
            if (i >= size) { branch outer; }
            var bi: BodyValue = bodies[i]
            bodies[i].x = bi.x + dt * bi.vx;
            bodies[i].y = bi.y + dt * bi.vy;
            bodies[i].z = bi.z + dt * bi.vz;
            i = i + 1;
            branch;
        }
    }
}

export fun energy(): f64 {
    let size: i32 = 5;

    var e: f64 = 0.0;
    var i: i32 = 0;
    block outer {
        loop {
            if (i >= size) { branch outer; }
            var bodyi: BodyValue = bodies[i];
            e = e + (0.5 * bodyi.mass * (bodyi.vx * bodyi.vx +
                bodyi.vy * bodyi.vy + bodyi.vz * bodyi.vz));
            var j: i32 = i + 1;
            block inner {
                loop {
                    if (j >= size) { branch inner; }
                    var bodyj: BodyValue = bodies[j];
                    var dx: f64 = bodyi.x - bodyj.x;
                    var dy: f64 = bodyi.y - bodyj.y;
                    var dz: f64 = bodyi.z - bodyj.z;

                    var distance: f64 = (dx * dx + dy * dy + dz * dz) sqrt;
                    e = e -((bodyi.mass * bodyj.mass) / distance);
                    j = j + 1;
                    branch;
                }
            }
            i = i + 1;
            branch;
        }
    }

    e;
}

export fun mainLoop(n: i32): void {
    var i: i32 = 0;
    block outer {
        loop {
            if (i >= n) { branch outer; }
            advance(0.01);
            i = i + 1;
            branch;
        }
    }
}
